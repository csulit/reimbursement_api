generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  name           String           @db.VarChar(100)
  personal_email String?          @unique @db.VarChar(100)
  work_email     String?          @unique @db.VarChar(100)
  provider       String?          @default("auzre-ad") @db.VarChar(100)
  provider_id    String?          @db.VarChar(200)
  password       String?
  profile        UserProfile?
  comp_and_ben   ReimbCompAndBen?
  reimbursements Reimbursement[]
  approvers      String[]
  bank_accounts  BankAccount[]
  roles          String[]
  permissions    String[]

  @@map("users")
}

model UserProfile {
  id           String  @id @default(uuid())
  emp_id       String?
  first_name   String  @db.VarChar(100)
  last_name    String  @db.VarChar(100)
  is_internal  Boolean @default(true)
  organization String  @default("KMCC") @db.VarChar(100)
  account_code String? @db.VarChar(100)
  department   String  @db.VarChar(100)
  position     String? @db.VarChar(100)
  is_execom    Boolean @default(false)
  is_approver  Boolean @default(false)
  user_id      String  @unique
  user         User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model ReimbCompAndBen {
  id                      String @id @default(uuid())
  basic_salary            Float  @default(0.0)
  phone_allowance         Float  @default(0.0)
  communication_allowance Float  @default(0.0)
  user_id                 String @unique
  user                    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("reimb_comp_and_ben")
}

model BankAccount {
  id             String  @id @default(uuid())
  bank_name      String  @db.VarChar(50)
  account_number String  @db.VarChar(50)
  user_id        String? @db.VarChar(100)
  user           User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("bank_accounts")
}

model Reimbursement {
  id                       String       @id @default(uuid())
  rid                      String       @unique
  user_id                  String
  user                     User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ap_no                    String?
  batch_no                 Int          @default(0)
  particulars              Particular[]
  status                   String?      @default("Created")
  filing_date              DateTime     @db.Date
  crediting_date           DateTime?    @db.Date
  total_expense            Float        @default(0.0)
  amount_to_be_reimbursed  Float        @default(0.0)
  is_cancelled             Boolean      @default(false)
  is_for_approval          Boolean      @default(false)
  is_fully_approved        Boolean      @default(false)
  default_first_approver   String?      @db.VarChar(100)
  approvers                Json[]
  next_approver            Int          @default(1)
  next_approver_id         String?      @db.VarChar(100)
  next_approver_department String?      @db.VarChar(100)
  approver_stages          Int          @default(0)
  logs                     Json[]
  created_at               DateTime     @default(now())

  @@map("reimbursements")
}

model Particular {
  id                        String         @id @default(uuid())
  name                      String         @db.VarChar(100)
  justification_and_purpose String
  OR_date                   DateTime       @db.Date
  ORN                       String?        @db.VarChar(100)
  department                String?        @db.VarChar(100)
  location                  String?        @db.VarChar(100)
  type_of_expense           String         @db.VarChar(100)
  vat                       Boolean        @default(false)
  total                     Float
  file_url                  String?
  file_name                 String?        @unique
  created_at                DateTime       @default(now())
  reimbursement_id          String?        @db.VarChar(255)
  reimbursement             Reimbursement? @relation(fields: [reimbursement_id], references: [id], onDelete: Cascade)

  @@map("particulars")
}

model ApproverConfig {
  id        String @id @default(uuid())
  name      String @db.VarChar(100)
  flow      String
  condition String
  scope     String @default("Internal")
  order     Json[]

  @@map("approver_configs")
}

model Apikey {
  id          String   @id @default(uuid())
  key         String   @unique
  revoked     Boolean  @default(false)
  date_issued DateTime @default(now())

  @@map("api_keys")
}

model Department {
  id   String  @id @default(uuid())
  name String  @db.VarChar(100)
  code String? @unique @db.VarChar(50)

  @@map("departments")
}

model Location {
  id   String  @id @default(uuid())
  name String  @db.VarChar(100)
  code String? @unique @db.VarChar(50)

  @@map("locations")
}

model TypeOfExpense {
  id   String  @id @default(uuid())
  name String  @unique @db.VarChar(50)
  code String? @unique @db.VarChar(50)

  @@map("type_of_expenses")
}

model RequestCounter {
  id    String @id @default(uuid())
  count Int    @default(0)

  @@map("request_counter")
}
