generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  name           String           @db.VarChar(100)
  personal_email String           @unique @db.VarChar(100)
  work_email     String?          @unique @db.VarChar(100)
  provider       String?          @default("auzre-ad") @db.VarChar(100)
  provider_id    String?          @db.VarChar(200)
  password       String?
  profile        UserProfile?
  comp_and_ben   ReimbCompAndBen?
  reimbursements Reimbursement[]
  approvers      Json[]
  roles          String[]

  @@map("users")
}

model UserProfile {
  id           String  @id @default(uuid())
  first_name   String  @db.VarChar(100)
  last_name    String  @db.VarChar(100)
  is_internal  Boolean @default(true)
  organization String  @default("KMCC") @db.VarChar(100)
  account_code String? @db.VarChar(100)
  department   String  @db.VarChar(100)
  is_approver  Boolean @default(false)
  user_id      String  @unique
  user         User    @relation(fields: [user_id], references: [id])

  @@map("user_profiles")
}

model ReimbCompAndBen {
  id              String @id @default(uuid())
  basic_salary    Float  @default(0.0)
  phone_allowance Float  @default(0.0)
  user_id         String @unique
  user            User   @relation(fields: [user_id], references: [id])

  @@map("reimb_comp_and_ben")
}

model Reimbursement {
  id                      String       @id @default(uuid())
  user_id                 String
  user                    User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ap_no                   String?
  batch_no                Int          @default(0)
  particulars             Particular[]
  status                  String?      @default("Created")
  filing_date             DateTime     @db.Date
  crediting_date          DateTime?    @db.Date
  total_expense           Float        @default(0.0)
  amount_to_be_reimbursed Float        @default(0.0)
  is_for_approval         Boolean      @default(false)
  approval_stage_date     DateTime?
  approvers               Json[]
  next_approver           Int          @default(1)
  created_at              DateTime     @default(now())

  @@map("reimbursements")
}

model Particular {
  id                        String         @id @default(uuid())
  name                      String
  justification_and_purpose String
  OR_date                   DateTime       @db.Date
  ORN                       String?
  department                String?
  location                  String?
  type_of_expense           String
  vat                       Boolean        @default(false)
  total                     Float
  file_url                  String?
  file_name                 String?        @unique
  created_at                DateTime       @default(now())
  reimbursement_id          String?
  reimbursement             Reimbursement? @relation(fields: [reimbursement_id], references: [id], onDelete: Cascade)

  @@map("particulars")
}

model Department {
  id   String  @id @default(uuid())
  name String  @db.VarChar(100)
  code String? @unique @db.VarChar(50)

  @@map("departments")
}

model Location {
  id   String  @id @default(uuid())
  name String  @db.VarChar(100)
  code String? @unique @db.VarChar(50)

  @@map("locations")
}

model TypeOfExpense {
  id   String  @id @default(uuid())
  name String  @unique @db.VarChar(50)
  code String? @unique @db.VarChar(50)

  @@map("type_of_expenses")
}
